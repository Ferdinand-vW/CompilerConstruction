imports
{
import qualified UHC.Light.Compiler.CoreRun.API as CR
}

-------------------------------------------------------------------------------
-- Syntax
-------------------------------------------------------------------------------

data Mod
  | Mod  main  :: Exp
         binds :: BindL

data Ref
  | Glob offset     :: {Int}
  | Loc  levdiff    :: {Int}
         offset     :: {Int} 
  | Tag  ref :: Ref
  | Field fld :: {Int}
          ref :: Ref
          

deriving Ref : Show
deriving Bind : Show
deriving Exp : Show
deriving SExp : Show

type RefL = [Ref]
  
data SExp
  | Int  i :: {Int}
  | Var  x :: Ref

type SExpL = [SExp]
  
data Exp
  | SExp sexp :: SExp
  | Nil
  | Cons t1 :: SExp t2 :: SExp
  | Lam  args :: RefL
         body :: Exp
  | App  func :: Exp
         args :: SExpL
  | Prim func :: {String}
         args :: SExpL
  | Node tag  :: {Int}
         args :: SExpL
  | Case sexp :: SExp
         alts :: ExpL
  | Let  bind :: Bind
         body :: Exp
  | Dbg  info :: {String}
  | Eval body :: Exp

type ExpL = [Exp]
  
data Bind
  | Bind x    :: Ref
         xexp :: Exp

type BindL = [Bind]

imports
{
import CCO.SourcePos
import CCO.Tree                   (Tree (fromTree, toTree))
import qualified CCO.Tree as T    (ATerm (App))
import CCO.Tree.Parser            (parseTree, app, arg)
import Control.Applicative        (Applicative ((<*>)), (<$>))
}

deriving ATm : Show
deriving Tm : Show
deriving Tm_ : Show

{
instance Tree Tm where
  fromTree (Tm pos t) = T.App "Tm" [fromTree pos, fromTree t]
  toTree = parseTree [app "Tm" (Tm <$> arg <*> arg)]

instance Tree Tm_ where
  fromTree (Nat x)       = T.App "Nat" [fromTree x]
  fromTree (Var x)       = T.App "Var" [fromTree x]
  fromTree Nil           = T.App "Nil" []
  fromTree (Cons t1 t2)   = T.App "Cons" [fromTree t1, fromTree t2]
  fromTree (Prim x t1 t2) = T.App "Prim" [fromTree x,fromTree t1, fromTree t2] --Added here
  fromTree (Lam x t1)    = T.App "Lam" [fromTree x, fromTree t1]
  fromTree (App t1 t2)   = T.App "App" [fromTree t1, fromTree t2]
  fromTree (Let x t1 t2) = T.App "Let" [fromTree x, fromTree t1, fromTree t2]
  fromTree (If exp t1 t2) = T.App "If" [fromTree exp, fromTree t1, fromTree t2]

  toTree = parseTree [ app "Nat" (Nat <$> arg                )
                     , app "Var" (Var <$> arg                )
                     , app "Nil" (pure Nil                   )
                     , app "Cons" (Cons <$> arg <*> arg      )
                     , app "Prim" (Prim <$> arg <*> arg <*> arg)
                     , app "Lam" (Lam <$> arg <*> arg        )
                     , app "App" (App <$> arg <*> arg        )
                     , app "Let" (Let <$> arg <*> arg <*> arg)
                     , app "If" (Let <$> arg <*> arg <*> arg)
                     ]

}

-------------------------------------------------------------------------------
-- Syntax
-------------------------------------------------------------------------------

data Tm
  | Tm  pos :: {SourcePos}  t :: Tm_

data Tm_
  | Nat  i :: {Int}
  | Var  x :: {Var}
  | Nil
  | Cons t1 :: Tm t2 :: Tm
  | Prim f :: {Var} t1 :: Tm t2 :: Tm
  | Lam  x :: {Var}  t1 :: Tm
  | App  t1 :: Tm  t2 :: Tm
  | Let  x :: {Var}  t1 :: Tm  t2 :: Tm
  | If exp :: Tm t1 :: Tm  t2 :: Tm
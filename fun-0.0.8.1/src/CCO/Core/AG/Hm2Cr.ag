imports
{
import Data.Maybe
}

data Core
    | Core tm :: ATm

attr Core
    syn core :: {Mod}

sem Core
    | Core  lhs.core = Mod (SExp (Var @tm.main)) (defaultBinds ++ @tm.binds)
            tm.genv = (8,[("True", Glob 7),("False", Glob 6),("isNil", Glob 5), --We have to fill up the environment with the build in features
                        ("isCons", Glob 4),("tail", Glob 3),("head", Glob 2),
                        ("cons", Glob 1),("nil",Glob 0)])
            tm.lenv = (0,[])
            tm.lvl = 0
            tm.args = 0

attr ATm
    syn tm :: self 
    syn main :: {Ref} --main of the Module 
    syn exp :: {Exp} --ATm is transformed to the corresponding Core expression
    syn binds use {++} {[]} :: {BindL} --bindings of the module
    inh genv :: {Map String Ref} --Environment for our global ref's
    inh lenv :: {Map String Ref} --Environment for our local ref's
    inh lvl :: {Int} --Determines whether we are at global or local lvl. 0 is global and higher is local.
    inh args :: {Int} --Number of consecutive lambda arguments

sem ATm
    |   ANat lhs.main = next @lhs.genv
              lhs.exp  = natExp @i
              lhs.binds = [Bind (next @lhs.genv) $ natExp @i]
    |   AVar lhs.main = next @lhs.genv
             lhs.exp  = varExp @lhs.genv @lhs.lenv @x
              lhs.binds = [Bind (next @lhs.genv) $ Lam [] $ varBind @lhs.genv @x]

{

natExp :: Int -> Exp
natExp i = SExp $ Int i

varExp :: Map String Ref -> Map String Ref -> String -> Exp
varExp genv lenv s = SExp $ findVarRef genv lenv s

varBind :: Map String Ref -> String -> Exp
varBind genv s = Eval $ SExp $ findVarRef' genv s

--First it looks for the Ref in the local environment, if it cannot find it, then
--it will check the global environment. If it wasn't found, then the program crashes.
--It is assumed that the Ref exists in either one of the two environments. If it does not
--then there must be a programming error.
findVarRef :: Map String Ref -> Map String Ref -> String -> SExp
findVarRef (_,genv) (_,lenv) s = Var $ fromMaybe (fromJust (lookup s genv))  (lookup s lenv)

--Same as findVarRef except for just a single environment
findVarRef' :: Map String Ref -> String -> SExp
findVarRef' (_,env) s = Var $ fromJust $ lookup s env

toSExp :: Exp -> SExp
toSExp (SExp s) = s
}


sem ATm
    |   ANil  lhs.main = next @lhs.genv
              lhs.exp = SExp $ findVarRef' @lhs.genv "nil"
              lhs.binds = [Bind (next @lhs.genv) $ nilBind' @lhs.genv]
    |   ACons lhs.main = next @lhs.genv
              lhs.exp = mkCons @lhs.genv @lhs.lenv (ACons @t1.tm @t2.tm)
              lhs.binds = [Bind (next @lhs.genv) $ mkCons @lhs.genv @lhs.lenv (ACons @t1.tm @t2.tm)]

{


nilBind' :: Map String Ref -> Exp
nilBind' genv = SExp $ findVarRef' genv "nil"

--makes a new expression for lists. We first determine the length of the list, which we can then
--use to determine the offset for the top of the list.
mkCons :: Map String Ref -> Map String Ref -> ATm -> Exp
mkCons genv lenv atm = consExp genv lenv offset atm (SExp $ Var $ Loc 0 offset)
  where
    offset = listLength atm - 1 + (getOffSet lenv)

--Recursively go through the given list and add a let binding for each cons
consExp :: Map String Ref -> Map String Ref -> Int -> ATm -> Exp -> Exp
consExp genv lenv n (ACons t1 t2) t3 = case t2 of
                            ACons _ _ -> consExp genv lenv (n-1) t2 (evalVar (toSExp t1))
                            ANil -> Let (Bind curr (App cons [toSExp t1, nil])) t3
                            AVar x -> Let (Bind curr (App cons [toSExp t1,ref x])) t3
      where
        cons = SExp $ findVarRef' genv "cons"
        nil = findVarRef' genv "nil"
        curr = Loc 0 n
        prev = Loc 0 (n - 1)
        toSExp (ANat n) = Int n
        toSExp (AVar x) = ref x
        ref x = findVarRef genv lenv x
        evalVar r = Let (Bind curr $ App cons [r,Var prev]) t3

listLength :: ATm -> Int
listLength (ACons _ l) = 1 + listLength l
listLength _ = 0

}


sem ATm
    |   ALam  lhs.main = next @lhs.genv
              lhs.exp  = joinLam [Loc (0) $ 0] @t1.exp
              lhs.binds = []
              t1.genv = @lhs.genv
              t1.lenv = updateEnv @lhs.lenv @lhs.args @x
              t1.lvl = @lhs.lvl + 1
              t1.args = 1 + @lhs.args
{

--We join the bindings of two consecutive lambda's, so that
--they do not appear as consecutive lambda's
joinLam :: RefL -> Exp -> Exp
joinLam xs (Lam ys t1) = Lam (xs ++ ys) t1
joinLam xs exp = Lam xs exp

--When we find a lambda we have to increment the lvls of all the variables
--already stored in the local environment. the function incrEnv does this for us.
--However if we have multiple consecutive lambda's they shouldn't all increment the lvl
--it should only happen once. newOffSetIncr does this for us, we also pass it the offset
--it should be given after insertion of all the lambda arguments.
updateEnv :: Map String Ref -> Int -> String -> Map String Ref
updateEnv lenv numArgs s = insertref (newOffSetIncr lenv (numArgs)) s (Loc 0 numArgs)

--We check whether this is the first lambda argument, if it is we increment the lvls of
--the local variables and pass it the new offset. Otherwise we only pass the new offset.
newOffSetIncr :: Map String Ref -> Int -> Map String Ref
newOffSetIncr (n,lenv) i
    | i >= 1 = (i,lenv)
    | i < 1 = (i,lenv')
    where (_,lenv') = incrEnv (n,lenv)

}


sem ATm
    |   AApp lhs.main = next @lhs.genv
              lhs.exp = appExp @lhs.lenv @t1.exp @t2.exp
              lhs.binds = [Bind (Glob (getOffSet @lhs.genv)) (Lam [] $ appExp @lhs.lenv @t1.exp @t2.exp)]
              t1.genv = @lhs.genv
              t2.genv = @lhs.genv
              t1.lenv = @lhs.lenv
              t2.lenv = @lhs.lenv
              t1.lvl = @lhs.lvl
              t2.lvl = @lhs.lvl

{
--Before we do an application, we want to evaluate both arguments given.
--So we create a let binding to do both evaluations.
appExp :: Map String Ref -> Exp -> Exp -> Exp
appExp lenv (SExp sexp1) (SExp sexp2) = Let (Bind (Loc 0 $ getOffSet lenv) (Eval (SExp sexp2))) (
                                Let (Bind (Loc 0 $ getOffSet lenv + 1) (Eval (SExp sexp1))) $ 
                                    App (SExp $ Var $ Loc 0 (getOffSet lenv + 1)) [Var $ Loc 0 (getOffSet lenv)])


}

sem ATm
    |   ALet lhs.main = @t2.main
              lhs.exp  = letExp @lhs.genv @t1.exp @t2.exp
              lhs.binds = letBinds @lhs.genv @t1.tm @t1.exp @t2.binds
              t1.genv = @lhs.genv
              loc.genv = globalLet @lhs.genv @lhs.lvl @x 
              t2.genv = @loc.genv
              t1.lenv = incrEnv $ insertRecursion @loc.genv @lhs.lenv @x @lhs.lvl
              t2.lenv = localLet @lhs.lenv @lhs.lvl @x
              t1.lvl = localLetLvl @lhs.lvl
              t2.lvl = @lhs.lvl
              t1.args = 0
              t2.args = 0

{

--This function inserts a global let's variable into the local environment of it's own binding
--and thus creating recursion. As the variable was inserted into the global environment, we 
--simply have to ask for it
insertRecursion :: Map String Ref -> Map String Ref -> String -> Int -> Map String Ref
insertRecursion genv lenv s lvl 
  | lvl == 0 = insertref lenv s (getRef $ findVarRef' genv s)
  | otherwise = lenv

--GlobalLet only adds a new ref to the global map when its level is 0.
globalLet :: Map String Ref -> Int -> String -> Map String Ref
globalLet genv lvl x 
  | lvl == 0 = insertg genv x
  | otherwise = genv

--LocalLetLvl needs to be > 0, because it already contains a local lvl zero.
localLetLvl :: Int -> Int
localLetLvl 0 = 1
localLetLvl lvl = lvl

--LocalLet will only insert a new local environment, when its level is higher then 0
localLet :: Map String Ref -> Int -> String -> Map String Ref
localLet lenv lvl x
  | lvl > 0 = insertl lenv x
  | otherwise = lenv


--Thus function creates a let expression for us, but depending on its binding
--it might have to add a lambda
letExp :: Map String Ref -> Exp -> Exp -> Exp
letExp genv (Let b t1) exp2 = Let (Bind (next genv) (Lam [] (Let b t1))) exp2
letExp genv exp exp2 = Let (Bind (next genv) exp) exp2

--Similar to letExp except for bindings.
letBinds :: Map String Ref -> ATm -> Exp -> BindL -> BindL
letBinds (n,_) (ALam _ _) exp t2binds = Bind (Glob n) exp : t2binds
letBinds (n,_) (ANat _) exp t2binds = Bind (Glob n) exp : t2binds
letBinds (n,_) _ exp t2binds = Bind (Glob n) (Lam [] exp) : t2binds
}

sem ATm
    |   APrim lhs.main = next @lhs.genv
              lhs.exp = Prim @f [toPrim @t1.exp, toPrim @t2.exp]
              lhs.binds = []
              t1.genv = @lhs.genv
              t2.genv = @lhs.genv
              t1.lenv = @lhs.lenv
              t2.lenv = @lhs.lenv

{
--toPrim is used to get SExp for the prim
toPrim :: Exp -> SExp
toPrim (SExp s) = Var $ Loc 0 (off s)
              where off (Var (Loc l o)) = o  
}

sem ATm
    |   AIf lhs.main = Glob (getOffSet @lhs.genv) --
              lhs.exp = createCase @exp.exp @loc.exp --
              loc.exp = Case (Var $ Tag $ Loc 0 $ getOffSet @lhs.lenv) [evalVar @t2.exp, evalVar @t1.exp]
              lhs.binds = [Bind (Glob (getOffSet @lhs.genv)) $ Lam [] $ createCase @exp.exp @loc.exp]
              exp.genv = @lhs.genv
              t1.genv = @lhs.genv
              t2.genv = @lhs.genv
              exp.lenv = @lhs.lenv
              t1.lenv = incrOffSet' @lhs.lenv 1 --We have to increase the offset by 1, because of the added let
              t2.lenv = incrOffSet' @lhs.lenv 1
              exp.lvl = @lhs.lvl + 1
              t1.lvl = @lhs.lvl + 1
              t2.lvl = @lhs.lvl + 1
              exp.args = 0
              t1.args = 0
              t2.args = 0
{

--AddCases adds a Let before the case for the AIf expr
createCase :: Exp -> Exp -> Exp
createCase e1@(SExp s) e2 = Let (Bind (getRef s) (Eval e1)) e2

--EvalVar evaluates a SExp. This is neccesary in the AIf.
evalVar :: Exp -> Exp
evalVar v@(SExp (Var r)) = Eval v
evalVar exp = exp

getRef :: SExp -> Ref
getRef (Var x) = x
getRef _ = error "Pattern match does not exist."


}
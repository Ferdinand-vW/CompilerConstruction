{
--We're using the map type to store refs of variables. 
--The int is used as offset
--The a is used as a key. 
--The b is the Ref 
type Map a b = (Int,[(a,b)])

--Next will return the next offset of a type and add this as a global ref
next :: Map String Ref -> Ref
next (n,_) = Glob n

getOffSet :: Map String Ref -> Int
getOffSet (n,_) = n

lookup'  :: String -> Map String Ref -> Maybe Ref
lookup' s (_,env) = lookup s env

--insertG will increment the offset and add the new global to the map
insertg :: Map String Ref -> String -> Map String Ref
insertg (n,xs) s = (n + 1,(s, Glob n) : xs)

--insertgWithValue is used to insert a new ref into the map
insertgWithValue :: Map String Ref -> String -> Ref -> Map String Ref
insertgWithValue (n,xs) s r = (n,(s,r):xs)

--insertl is used to insert a new Var with a Loc to the map and increment the offset.
insertl :: Map String Ref -> String -> Map String Ref
insertl (n,xs) s = (n + 1, (s, Loc 0 n) : xs)

--insertl' is used to insert a value into the map and increment the offset.
insertl' :: Map String Ref -> String -> Ref -> Map String Ref
insertl' (n,xs) s r = (n + 1,(s,r) : xs)

--incrEnv is used to increment the lvldiff and resets the offset
incrEnv :: Map String Ref -> Map String Ref
incrEnv (n,lenv) = (0, incr lenv)
  where incr [] = []
        incr ((s,(Loc lvl x)):xs) = (s,Loc (lvl + 1) x) : incr xs
        incr ((s,r):xs) = (s,r) : incr xs

--newOffSet is used to set a new offset 
newOffSet :: Map String Ref -> Int -> Map String Ref
newOffSet (n,lenv) i
    | i >= 1 = (i,lenv)
    | i < 1 = (i,lenv')
    where (_,lenv') = incrEnv (n,lenv)
}
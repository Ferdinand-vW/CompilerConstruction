----------------------------------------

attr Diag Diag_
    syn pic use {++} {[]} :: {[Command]}
    syn cjoint :: {(Double,Double)}
    syn ejoint :: {(Double,Double)}
    inh pos :: {(Double,Double)}


sem Diag_
    | Platform lhs.pic = platform @lhs.pos @m
               lhs.cjoint = (fst @lhs.pos + 50, snd @lhs.pos - 25)
               lhs.ejoint = (fst @lhs.pos, snd @lhs.pos - 25)
    | Program lhs.pic = program @lhs.pos @p @l
              lhs.ejoint = ((fst @lhs.pos) +  7.5, (snd @lhs.pos) - 30)
              lhs.cjoint = ((fst @lhs.pos) + 57.5, (snd @lhs.pos) - 15)
    | Interpreter lhs.pic = interpreter @lhs.pos @i @l @m
                  lhs.ejoint = (fst @lhs.pos, snd @lhs.pos - 30)
                  lhs.cjoint = (fst @lhs.pos + 50, snd @lhs.pos - 20)
    | Compiler lhs.pic = compiler @lhs.pos @c @l1 @l2 @m
               lhs.ejoint = (fst @lhs.pos + 50, snd @lhs.pos - 30)
               lhs.cjoint = (fst @lhs.pos + 50, snd @lhs.pos - 20)
    | Execute lhs.pic = @d1.pic ++ @d2.pic
              lhs.cjoint = @d2.cjoint
              lhs.ejoint = @d2.ejoint
              d1.pos = @lhs.pos
              d2.pos = @d1.ejoint
    | Compile lhs.cjoint = (fst @d1.cjoint + (3 * 50), snd @d1.cjoint)
              lhs.ejoint = @d2.ejoint
              d1.pos = @lhs.pos
              d2.pos = @d1.cjoint


{


platform :: (Double, Double) -> String -> [Command]
platform (x,y) m = [
            Put (x, y + 15) $ Line (5, -3) 25,
            Put (x + 25,y) $ Line (5, 3) 25,
            Put (x, y + 15) $ Line (0, 1) 15,
            Put (x, y + 30) $ Line (1, 0) 50,
            Put (x + 50, y + 30) $ Line (0,-1) 15,
            Put (x, y + 15) $ Makebox (50, 15) m
        ]

program ::  (Double, Double) ->  String -> String -> [Command]
program (x,y) p l = [
                Put (x + 7.5, y) $ Line (1,0) 50,
                Put (x + 7.5, y) $ Line (0,1) 15,
                Put (x + 7.5, y + 15) $ Line (-1, 2) 7.5,
                Put (x + 57.5, y + 15) $ Line (1, 2) 7.5,
                Put (x + 57.5, y) $ Line (0,1) 15,
                Put (x, y + 30) $ Line (1,0) 65,
                Put (x + 7.5, y + 15) $ Makebox (50, 15) p,
                Put (x + 7.5, y) $ Makebox (50, 15) l
            ]


interpreter :: (Double, Double) -> String -> String -> String -> [Command]
interpreter (x,y) i l m = [ 
                        Put (x, y) $ Framebox (50, 30) "", 
                        Put (x, y + 20) $ Makebox (50, 10) i,
                        Put (x, y + 10) $ Makebox (50, 10) l,
                        Put (x, y) $ Makebox (50,10) m
                    ]

compiler :: (Double, Double) -> String -> String -> String -> String -> [Command] 
compiler (x,y) c l1 l2 m = [
                        Put (x + 50, y) $ Line (0, 1) 20,
                        Put (x + 50, y + 20) $ Line (-1, 0) 50,
                        Put (x, y + 20) $ Line (0, 1) 10,
                        Put (x, y + 30) $ Line (1, 0) 150,
                        Put (x + 150, y + 30) $ Line (0,-1) 10,
                        Put (x + 150, y + 20) $ Line (-1,0) 50,
                        Put (x + 100, y + 20) $ Line (0,-1) 20,
                        Put (x + 100, y) $ Line (-1, 0) 50,
                        Put (x, y + 20) $ Makebox (50,10) l1,
                        Put (x + 50, y + 20) $ Makebox (50,10) "$\\longrightarrow$",
                        Put (x + 100, y + 20) $ Makebox (50,10) l2,
                        Put (x + 55, y + 10) $ Makebox (50,10) c,
                        Put (x + 50, y) $ Makebox (50,10) m
                    ]


}
-------------------Syntax-----------------

{
data Ty = Prog
        | Interp
        | Comp
        | PlatF
        | Runnable
        | Framework
         deriving (Eq, Show)

instance Tree Ty where
    fromTree Prog = App "Prog" []
    fromTree Interp = App "Interp" []
    fromTree Comp = App "Comp" []
    fromTree PlatF = App "PlatF" []
    fromTree Runnable = App "Runnable" []
    fromTree Framework = App "Framework" []

    toTree = parseTree [ app "Prog" (pure Prog),
                         app "Interp" (pure Interp),
                         app "Comp" (pure Comp),
                         app "PlatF" (pure PlatF),
                         app "Runnable" (pure Runnable),
                         app "Framework" (pure Framework)
                       ]



match :: Ty -> Ty -> Bool
match Runnable Runnable = True
match Runnable _ = False
match Framework Framework = True
match Framework _ = False
match Prog Runnable = True
match Interp Runnable = True
match Comp Runnable = True
match Interp Framework = True
match PlatF Framework = True
match ty1 ty2 = ty1 == ty2

matchInfo :: Maybe Ident -> Maybe Ident -> Bool
matchInfo (Just i) (Just j) = i == j
matchInfo _ _ = True
}



-----------------------Typing-----------------
attr Diag Diag_
    syn ty :: {Ty}
    syn tyErrs use {++} {[]} :: {[TyErr]}
    syn tyInfo :: {TyInfo}
    syn tyInfoErrs use {++} {[]} :: {[TyInfoErr]}

sem Diag_
    | Program lhs.ty = Prog
    | Interpreter lhs.ty = Interp
    | Compiler lhs.ty = Comp
    | Platform lhs.ty = PlatF
    | Execute lhs.ty = @d2.ty
    | Compile lhs.ty = @d1.ty

sem Diag_
    | Program lhs.tyInfo = TyInfo (Just @l) Nothing Nothing
    | Interpreter lhs.tyInfo = TyInfo (Just @l) Nothing (Just @m)
    | Compiler lhs.tyInfo = TyInfo (Just @l1) (Just @l2) (Just @m)
    | Platform lhs.tyInfo = TyInfo Nothing Nothing (Just @m)
    | Execute lhs.tyInfo = @d2.tyInfo
    | Compile lhs.tyInfo = @d1.tyInfo

sem Diag_
    | Execute lhs.tyErrs =  @d1.tyErrs ++ @d2.tyErrs ++
                            checkRunnable @d1.pos @d1.ty ++
                            checkFramework @d2.pos @d2.ty

{
checkRunnable :: SourcePos -> Ty -> [TyErr]
checkRunnable _ ty | match ty Runnable = []
checkRunnable pos ty                   = [TyErr pos nonExe Runnable ty]
    where
        nonExe = "Cannot execute a non-runnable"

checkFramework :: SourcePos -> Ty -> [TyErr]
checkFramework _ ty | match ty Framework = []
checkFramework pos ty                    = [TyErr pos nonFrame Framework ty]
    where
        nonFrame = "Cannot execute on non-Framework"
}

sem Diag_
    | Compile lhs.tyErrs =  @d1.tyErrs ++ @d2.tyErrs ++
                            checkRunnable @d1.pos @d1.ty ++
                            checkComp @d2.pos @d2.ty

{
checkComp :: SourcePos -> Ty -> [TyErr]
checkComp _ ty | match ty Comp = []
checkComp pos ty               = [TyErr pos nonComp Comp ty]
    where
        nonComp = "Must be compiled using a compiler"

}

sem Diag_
    | Execute lhs.tyInfoErrs = @d1.tyInfoErrs ++ @d2.tyInfoErrs ++
                                checkIfMatches @d1.pos @d1.ty @d2.ty @d1.tyInfo @d2.tyInfo
    | Compile lhs.tyInfoErrs = @d1.tyInfoErrs ++ @d2.tyInfoErrs ++
                                checkIfMatches @d1.pos @d1.ty @d2.ty @d1.tyInfo @d2.tyInfo

{
checkIfMatches :: SourcePos -> Ty -> Ty -> TyInfo -> TyInfo -> [TyInfoErr]
checkIfMatches _ Prog Interp (TyInfo s1 t1 m1) (TyInfo s2 t2 m2) | matchInfo s1 s2 = []
checkIfMatches pos Prog Interp (TyInfo s1 t1 m1) (TyInfo s2 t2 m2) = genTyInfoErr pos s1 s2
checkIfMatches _ _ Interp (TyInfo s1 t1 m1) (TyInfo s2 t2 m2) | matchInfo m1 s2 = []
checkIfMatches pos _ Interp (TyInfo s1 t1 m1) (TyInfo s2 t2 m2) = genTyInfoErr pos m1 s2
checkIfMatches _ Prog PlatF (TyInfo s1 t1 m1) (TyInfo s2 t2 m2) | matchInfo s1 m2 = []
checkIfMatches pos Prog PlatF (TyInfo s1 t1 m1) (TyInfo s2 t2 m2) = genTyInfoErr pos s1 m2
checkIfMatches _ _ PlatF (TyInfo s1 t1 m1) (TyInfo s2 t2 m2) | matchInfo m1 m2 = []
checkIfMatches pos _ PlatF (TyInfo s1 t1 m1) (TyInfo s2 t2 m2) = genTyInfoErr pos m1 m2
checkIfMatches pos Prog Comp (TyInfo s1 t1 m1) (TyInfo s2 t2 m2)   | matchInfo s1 s2 = []
                                                                   | otherwise = genTyInfoErr pos s1 s2
checkIfMatches pos _ Comp (TyInfo s1 t1 m1) (TyInfo s2 t2 m2)      | matchInfo m1 s2 = []
                                                                   | otherwise = genTyInfoErr pos m1 s2
checkIfMatches _ _ _ _ _ = [] --Type error has occurred so we cannot match type infos



genTyInfoErr :: SourcePos -> Maybe Ident -> Maybe Ident -> [TyInfoErr]
genTyInfoErr pos mi mj = [TyInfoErr pos descr mi mj]
    where
        descr = "Cannot execute runnable on a non-matching platform or interpreter"
}

--------------------Type Info-------------------------
{
data TyInfo = TyInfo {source :: Maybe Ident, target :: Maybe Ident, platform :: Maybe Ident}

data TyInfoErr = TyInfoErr SourcePos String (Maybe Ident) (Maybe Ident)

instance Printable TyInfoErr where
    pp = ppTyInfoErr
}


--------------------Type Errors-----------------------

{
data TyErr = TyErr SourcePos String Ty Ty

instance Printable TyErr where
    pp = ppTyErr
}

-----------------Print type errors--------------------
{
-- | Pretty prints a type error message.
ppTyErr :: TyErr -> Doc
ppTyErr (TyErr pos descr expected inferred)
  = ppErr "Type error" pos descr expected inferred

-- | Pretty prints a type info error message
ppTyInfoErr :: TyInfoErr -> Doc
ppTyInfoErr (TyInfoErr pos descr expected inferred)
    = ppErr "Type info error" pos descr expected inferred

ppErr :: (Show a, Show b) => String -> SourcePos -> String -> a -> b -> Doc
ppErr msg pos descr a b =
    above [ppHeader, text " ", ppExpected, ppInferred]
    where
        ppHeader = wrapped $
                    describeSourcePos pos ++ ": " ++ msg ++ ": " ++ descr ++ "."
        ppExpected = text "? expected : " >|< showable a
        ppInferred = text "? inferred : " >|< showable b
}
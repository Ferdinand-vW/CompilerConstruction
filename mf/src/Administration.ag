include "AttributeGrammar.ag"

imports
{
import qualified Data.Map as M
import qualified Data.Set as S
}

{


toProgramInfo :: Program -> ProgramInfo
toProgramInfo program = pinfo_Syn_Program $ wrap_Program (sem_Program program) (Inh_Program)

data ProgramInfo = ProgramInfo {blocks :: M.Map Label Block, init :: Label, finals :: [Label], flow :: Flow, vars :: [Var]}
    deriving Show

data Block = 
    B_IAssign {name :: String, valI :: IExpr} |
    B_BAssign {name :: String, valB :: BExpr} |
    B_Cond {cond :: BExpr} |
    B_Skip deriving Show

type Label = Int
type Flow = [(Int, Int)]
type Var = String
}

attr Program
     syn pinfo :: ProgramInfo

sem Program 
    | Program lhs.pinfo = ProgramInfo @stat.blocks @stat.initl (@stat.flabels) @stat.flow (S.toList @stat.svars)
              stat.label = fst @loc.procs
              loc.procs = foldProcs @procs
              stat.procs = snd @loc.procs

attr Stat
    inh label :: {Label}
    syn main :: Stat'
    syn blocks :: {M.Map Label Block}
    syn st :: self
    syn maxLabel :: {Int}
    syn flowLabel :: {Int}
    syn flow use {++} {[]} :: {Flow}
    inh procs :: {M.Map String Proc'}
    syn svars :: {S.Set Var}
    syn initl :: {Label}
    syn flabels :: {[Label]}

attr Proc
    inh label :: {Label}
    syn pmap :: {M.Map String Proc}
    syn main :: {(Int,Proc')}
    syn name :: {String}

sem Proc
    | Proc lhs.main = (@stat.maxLabel + 1, Proc' @lhs.label (@stat.maxLabel + 1) @name @inp @out @stat.main)
           lhs.pmap = M.singleton @name (Proc @name @inp @out @stat.st)
           lhs.name = @name
           stat.label = @lhs.label + 1
           stat.procs = M.empty

sem Stat
    | Skip       lhs.main      = Skip' @lhs.label
                 lhs.maxLabel  = @lhs.label
                 lhs.flowLabel = @lhs.label
                 lhs.blocks    = M.singleton @lhs.label B_Skip
                 lhs.svars     = S.empty
                 lhs.flow      = []
                 lhs.initl     = @lhs.label
                 lhs.flabels   = [@lhs.label]
    | IfThenElse lhs.main      = IfThenElse' @lhs.label @cond @stat1.main @stat2.main
                 lhs.maxLabel  = @stat2.maxLabel
                 lhs.flowLabel = @lhs.label
                 lhs.flow      = (@lhs.label, @loc.label1) : (@lhs.label, @loc.label2) : @stat1.flow ++ @stat2.flow
                 stat1.label   = @loc.label1
                 loc.label1    = @lhs.label + 1
                 loc.label2    = @stat1.maxLabel + 1
                 stat2.label   = @loc.label2
                 lhs.blocks    = M.union (M.union (M.singleton @lhs.label (B_Cond @cond)) @stat1.blocks) @stat2.blocks
                 lhs.svars     = S.union @stat1.svars @stat2.svars
                 lhs.initl     = @lhs.label
                 lhs.flabels   = [@stat1.maxLabel,@stat2.maxLabel]
    | While      lhs.main      = While' @lhs.label @cond @stat.main
                 lhs.maxLabel  = @stat.maxLabel
                 lhs.flowLabel = @lhs.label
                 lhs.flow      = (@lhs.label, @loc.label1) : (@stat.maxLabel,@lhs.label) : @stat.flow
                 loc.label1    = @lhs.label + 1
                 stat.label    = @loc.label1
                 lhs.blocks    = M.union (M.singleton @lhs.label (B_Cond @cond)) @stat.blocks
                 lhs.svars     = @stat.svars
                 lhs.initl     = @lhs.label
                 lhs.flabels   = [@lhs.label]
    | IAssign    lhs.main      = IAssign' @lhs.label @name @val
                 lhs.maxLabel  = @lhs.label
                 lhs.flowLabel = @lhs.label
                 lhs.blocks    = M.singleton @lhs.label $ B_IAssign @name @val
                 lhs.svars     = S.singleton @name
                 lhs.flow      = []
                 lhs.initl     = @lhs.label
                 lhs.flabels   = [@lhs.label]
    | BAssign    lhs.main      = BAssign' @lhs.label @name @val
                 lhs.maxLabel  = @lhs.label
                 lhs.flowLabel = @lhs.label
                 lhs.blocks    = M.singleton @lhs.label $ B_BAssign @name @val
                 lhs.svars     = S.singleton @name
                 lhs.flow      = []
                 lhs.initl     = @lhs.label
                 lhs.flabels   = [@lhs.label]
    | Seq        lhs.main      = Seq' @stat1.main @stat2.main
                 lhs.maxLabel  = @stat2.maxLabel
                 lhs.flowLabel = @stat2.flowLabel
                 lhs.flow      = (@stat1.flowLabel,@loc.label2) : @stat1.flow ++ @stat2.flow
                 lhs.blocks    = M.union @stat1.blocks @stat2.blocks
                 stat1.label   = @lhs.label
                 loc.label2    = @stat1.maxLabel + 1
                 stat2.label   = @loc.label2
                 lhs.svars     = S.union @stat1.svars @stat2.svars
                 lhs.initl     = @lhs.label
                 lhs.flabels   = @stat2.flabels

{

foldProcs :: Procs -> (Int, M.Map String Proc')
foldProcs procs = foldr (\x y -> 
                let (l,proc') = wrapproc x (fst y)
                in (l + 1,M.insert (getName proc') proc' $ snd y)) (1,M.empty) procs

getName :: Proc' -> String
getName (Proc' _ _ name _ _ _) = name

wrapproc :: Proc -> Int -> (Int, Proc')
wrapproc proc label = main_Syn_Proc $ wrap_Proc (sem_Proc proc) (Inh_Proc label)
}
include "AttributeGrammar.ag"

imports
{
import qualified Data.Map as M
import qualified Data.Set as S
import Data.Maybe
}

{
--Wrapper for making ProgramInfo
toProgramInfo :: Program -> ProgramInfo
toProgramInfo program = pinfo_Syn_Program $ wrap_Program (sem_Program program) (Inh_Program)

--Holds all info about the Program
data ProgramInfo = ProgramInfo {blocks :: M.Map Label Block, labels :: [Label] , init :: [Label], 
                                finals :: [Label], flow :: Flow, interflow :: InterFlow, vars :: [Var]}

--Block for each assignment, expression.
data Block = 
    B_IAssign {name :: String, valI :: IExpr} |
    B_BAssign {name :: String, valB :: BExpr} |
    B_Cond {cond :: BExpr} |
    B_Skip |
    B_CallEntry {name :: String, params :: Exprs, cOut :: String, pArgs :: [Var], pOut :: Var} |
    B_CallExit  {name :: String, params :: Exprs, cOut :: String, pArgs :: [Var], pOut :: Var} |
    B_ProcEntry {name :: String, args :: [Var], out :: Var} |
    B_ProcExit
    deriving Show

type Label = Int
type Flow = [(Int, Int)]
type InterFlow = [(Int,Int,Int,Int)]
type Var = String
}

attr Program
     syn pinfo :: ProgramInfo --Build the ProgramInfo, will be defined only once

sem Program 
    | Program lhs.pinfo = ProgramInfo @loc.blocks [1 .. @stat.maxLabel] [@stat.initLabel] 
                                     (@stat.finLabels) @loc.flow @loc.interflow (S.toList @loc.svars)
              --Take information from both the procedures and the stat and join these
              loc.blocks    = M.union @procs.blocks @stat.blocks
              loc.flow      = @procs.flow ++ @stat.flow
              loc.interflow = @procs.interflow ++ @stat.interflow
              loc.svars     = S.union @procs.svars @stat.svars
              --We start with the label 1 and pass this to the first procedure
              procs.label = 1
              --The first label of stat is the maximum label in the procedures + 1
              stat.label = @procs.maxLabel + 1
              procs.proc_labels = M.empty
              stat.proc_labels = @procs.proc_labels_syn
              procs.proc_args = M.empty
              stat.proc_args = @procs.proc_args_syn

attr Procs Proc Stat
    inh label :: {Label} --Label to be given to the next Block
    syn maxLabel :: {Label} --Max label given to some block
    syn blocks :: {M.Map Label Block} --We store the blocks in a map keyed with their label
    inh proc_labels :: {M.Map String (Label,Label)} --As a stat can contain a call to a Proc, we need someway of finding it's Label
    inh proc_args :: {M.Map String ([Var],Var)} --Same thing, but now for the parameters and result variable of the procedure
    syn flow use {++} {[]} :: {Flow}
    syn interflow use {++} {[]} :: {InterFlow}

attr Stat
    syn flowLabels :: {[Label]} --Mostly used just because of 'while' and 'if', see 'if' for explanation
    syn initLabel :: {Label} --Label that we start the program with
    syn finLabels :: {[Label]} --Labels that we end the program with

attr Procs Proc
    syn proc_labels_syn :: {M.Map String (Label,Label)} --Builds up the procedure Maps, so that they can be passed to the Stat of the Program
    syn proc_args_syn :: {M.Map String ([Var],Var)}

--Sem for a list of Proc. Each Proc is the head of a Cons, it ends with Nil
--This sem is mostly used for passing syn/inh attributes from the/to the next Proc and combining information from all Procs
sem Procs
    | Cons hd.label            = @lhs.label
           tl.label            = @hd.maxLabel + 1
           lhs.maxLabel        = @tl.maxLabel
           lhs.blocks          = M.union @hd.blocks @tl.blocks
           lhs.proc_labels_syn = M.union @hd.proc_labels_syn @tl.proc_labels_syn
           hd.proc_labels      = @lhs.proc_labels
           tl.proc_labels      = @hd.proc_labels_syn
           lhs.proc_args_syn   = M.union @hd.proc_args_syn @tl.proc_args_syn
           hd.proc_args        = @lhs.proc_args
           tl.proc_args        = @hd.proc_args_syn
           lhs.flow            = @hd.flow ++ @tl.flow
           lhs.interflow       = @hd.interflow ++ @tl.interflow
           lhs.svars           = S.union @hd.svars @tl.svars
    | Nil  lhs.maxLabel        = @lhs.label - 1
           lhs.blocks          = M.empty
           lhs.proc_labels_syn = M.empty
           lhs.proc_args_syn   = M.empty
           lhs.flow            = []
           lhs.interflow       = []
           lhs.svars           = S.empty

sem Proc
    | Proc stat.label          = @lhs.label + 1
           lhs.maxLabel        = @stat.maxLabel + 1
           lhs.blocks          = M.union
                                    (M.union (
                                        M.singleton @lhs.label @loc.block) ( --Store a block for the entry of the procedure
                                        M.singleton (@stat.maxLabel + 1) B_ProcExit) --Store a block for the exit, which label comes 
                                                                                     --after the label of the Stat of the procedure
                                    ) 
                                    @stat.blocks --Add the blocks of the stat
           loc.block           = B_ProcEntry @name @inp @out
           loc.proc_labels     = M.union                        --Add the procedure labels to the map
                                    (M.singleton @name (@lhs.label,@stat.maxLabel + 1)) 
                                    @lhs.proc_labels
           lhs.proc_labels_syn = @loc.proc_labels
           stat.proc_labels    = @loc.proc_labels
           loc.proc_args       = M.union                        --Add the procedure variables to the map
                                    (M.singleton @name (@inp,@out)) 
                                    @lhs.proc_args
           lhs.proc_args_syn   = @loc.proc_args
           stat.proc_args      = @loc.proc_args
                                --Add the procedure entry label to the stat flow. Then Afterwards for every final label of Stat
                                --add to the flow: that label to the procedure exit label 
           lhs.flow            = [(@lhs.label,@lhs.label + 1)] ++ @stat.flow ++ map (\x -> (x,@stat.maxLabel + 1)) @stat.finLabels
           lhs.interflow       = @stat.interflow
           lhs.svars           = S.union (S.union (foldr (\x y -> S.insert x y) S.empty @inp) (S.singleton @out)) @stat.svars


attr Procs Proc Exprs Expr IExpr BExpr Stat
    syn svars :: {S.Set Var} --Stores all known variables in the program. Using a set to remove any duplicates
    syn slf :: self

--Most of these definitions are pretty self explanatory so we won't bother adding further comments
sem Stat
    | Skip       lhs.maxLabel      = @lhs.label
                 lhs.flowLabels    = [@lhs.label]
                 lhs.blocks        = M.singleton @lhs.label B_Skip
                 lhs.svars         = S.empty
                 lhs.flow          = []
                 lhs.interflow     = []
                 lhs.initLabel     = @lhs.label
                 lhs.finLabels     = [@lhs.label]
 --We use the synthesized attribute flowLabels, because the if we have a seq, then we don't want it to flow from
 --the max label to the next Stat. Instead we want it to flow from both the max label of stat1 and stat2 to the next Stat
 --As this wasn't possible to do using maxLabel we had to define another attribute that could
    | IfThenElse lhs.maxLabel      = @stat2.maxLabel
                 lhs.flowLabels    = [@loc.label1,@loc.label2]
                 lhs.flow          = (@lhs.label, @loc.label1) : (@lhs.label, @loc.label2) : @stat1.flow ++ @stat2.flow
                 lhs.interflow     = @stat1.interflow ++ @stat2.interflow
                 stat1.label       = @loc.label1
                 loc.label1        = @lhs.label + 1
                 loc.label2        = @stat1.maxLabel + 1
                 stat2.label       = @loc.label2
                 lhs.blocks        = M.union (M.union (M.singleton @lhs.label (B_Cond @cond.slf)) @stat1.blocks) @stat2.blocks
                 lhs.svars         = S.union @cond.svars (S.union @stat1.svars @stat2.svars)
                 lhs.initLabel     = @lhs.label
                 lhs.finLabels     = [@stat1.maxLabel,@stat2.maxLabel]
                 stat1.proc_labels = @lhs.proc_labels
                 stat2.proc_labels = @lhs.proc_labels
                 stat1.proc_args   = @lhs.proc_args
                 stat2.proc_args   = @lhs.proc_args
    --Similarly as the if statement now we actually want to flow from the condition to the next Stat and not from the maxLabel
    | While      lhs.maxLabel      = @stat.maxLabel
                 lhs.flowLabels    = [@lhs.label]
                 lhs.flow          = (@lhs.label, @loc.label1) : @stat.flow ++ map (\x -> (x,@lhs.label)) @stat.finLabels
                 lhs.interflow     = @stat.interflow
                 loc.label1        = @lhs.label + 1
                 stat.label        = @loc.label1
                 lhs.blocks        = M.union (M.singleton @lhs.label (B_Cond @cond.slf)) @stat.blocks
                 lhs.svars         = S.union @cond.svars @stat.svars
                 lhs.initLabel     = @lhs.label
                 lhs.finLabels     = [@lhs.label]
                 stat.proc_labels  = @lhs.proc_labels
                 stat.proc_args    = @lhs.proc_args

    | IAssign    lhs.maxLabel      = @lhs.label
                 lhs.flowLabels    = [@lhs.label]
                 lhs.blocks        = M.singleton @lhs.label $ B_IAssign @name @val.slf
                 lhs.svars         = S.union (S.singleton @name) @val.svars
                 lhs.flow          = []
                 lhs.interflow     = []
                 lhs.initLabel     = @lhs.label
                 lhs.finLabels     = [@lhs.label]

    | BAssign    lhs.maxLabel      = @lhs.label
                 lhs.flowLabels    = [@lhs.label]
                 lhs.blocks        = M.singleton @lhs.label $ B_BAssign @name @val.slf
                 lhs.svars         = S.union (S.singleton @name) @val.svars
                 lhs.flow          = []
                 lhs.interflow     = []
                 lhs.initLabel     = @lhs.label
                 lhs.finLabels     = [@lhs.label]

    | Seq        lhs.maxLabel      = @stat2.maxLabel
                 lhs.flowLabels    = @stat2.flowLabels
                 lhs.flow          = @stat1.flow ++ map (\x -> (x,@loc.label2)) @stat1.flowLabels ++ @stat2.flow
                 lhs.interflow     = @stat1.interflow ++ @stat2.interflow
                 lhs.blocks        = M.union @stat1.blocks @stat2.blocks
                 stat1.label       = @lhs.label
                 loc.label2        = @stat1.maxLabel + 1
                 stat2.label       = @loc.label2
                 lhs.svars         = S.union @stat1.svars @stat2.svars
                 lhs.initLabel     = @lhs.label
                 lhs.finLabels     = @stat2.finLabels
                 stat1.proc_labels = @lhs.proc_labels
                 stat2.proc_labels = @lhs.proc_labels
                 stat1.proc_args   = @lhs.proc_args
                 stat2.proc_args   = @lhs.proc_args

    | Call       lhs.maxLabel      = @lhs.label + 1
                 lhs.flowLabels    = [@lhs.label + 1]
                 lhs.flow          = [(@lhs.label , @loc.pInLabel), (@loc.pOutLabel,@lhs.label + 1)]
                 lhs.interflow     = [(@lhs.label,@loc.pInLabel,@loc.pOutLabel,@lhs.label + 1)]
                 lhs.blocks        = M.union (M.singleton @lhs.label @loc.entry) (M.singleton (@lhs.label + 1) @loc.exit)
                 lhs.initLabel     = @lhs.label
                 lhs.finLabels     = [@lhs.label + 1]
                 lhs.svars         = S.union @params.svars (S.singleton @out)
                 loc.entry         = B_CallEntry @name @params.slf @out @loc.pargs @loc.pout
                 loc.exit          = B_CallExit @name @params.slf @out @loc.pargs @loc.pout
                 --We have to store all information in both the Call entry and the Call Exit, because pretty printing prints
                 --the whole call. Information of the procedure is needed to deal with transfer functions. Which is also the
                 --reason why we had to build of maps for procedures containing labels and arguments.
                 loc.pInLabel      = fst $ fromJust $ M.lookup @name @lhs.proc_labels
                 loc.pOutLabel     = snd $ fromJust $ M.lookup @name @lhs.proc_labels
                 loc.pargs         = fst $ fromJust $ M.lookup @name @lhs.proc_args
                 loc.pout          = snd $ fromJust $ M.lookup @name @lhs.proc_args

sem Exprs
    | Cons      lhs.svars = S.union @hd.svars @tl.svars
    | Nil       lhs.svars = S.empty

sem Expr
    | B         lhs.svars = @expr.svars
    | I         lhs.svars = @expr.svars

sem IExpr
    | IConst    lhs.svars = S.empty
    | Var       lhs.svars = S.singleton @name
    | Plus      lhs.svars = S.union @left.svars @right.svars
    | Minus     lhs.svars = S.union @left.svars @right.svars
    | Times     lhs.svars = S.union @left.svars @right.svars
    | Divide    lhs.svars = S.union @left.svars @right.svars

sem BExpr
    | BConst        lhs.svars = S.empty
    | BVar          lhs.svars = S.singleton @name
    | LessThan      lhs.svars = S.union @left.svars @right.svars
    | GreaterThan   lhs.svars = S.union @left.svars @right.svars
    | LessEqual     lhs.svars = S.union @left.svars @right.svars
    | GreaterEqual  lhs.svars = S.union @left.svars @right.svars
    | IEqual        lhs.svars = S.union @left.svars @right.svars
    | BEqual        lhs.svars = S.union @left.svars @right.svars
    | And           lhs.svars = S.union @left.svars @right.svars
    | Not           lhs.svars = @val.svars